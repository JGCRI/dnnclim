#!/usr/bin/env python

"""Prototype configurations for models with various numbers of stages.

    These configurations are intended to be used with the functions in
    dnnclim.hypersearch to generate candidate models to test.  The
    seed configurations aren't compatible with each other, so you
    can't hybridize them directly.

    Use dnnclim.seedconfigs.getconfig(n) to retrieve the nth
    seed configuration.

"""

_configs = [
    (# Single downsampling stage, 3 scalar upsamplings
        (
            ( # stage 1
                ('C', 16, (3,3)),
                ('D', (2,3))
            ),
        ),
        (
            ( # stage 1
                ('U', 16, (3,3), (4,4)),
                ('C', 16, (3,3))    
            ),
            ( # stage 2
                ('U', 16, (3,3), (4,4)),
                ('C', 16, (3,3)),
            ),
            ( # stage 3
                ('U', 16, (3,3), (6,6)),
                ('C', 16, (3,3)),
            )
        ),
        (
            ( # stage 1
                ('U', 16, (3,3), (2,3)),
                ('C', 8, (3,3)),
            ),
        ),
        {'learnrate':0.01, 'regularization':('L1', 1.0), 'temp-loss':('normal',5.0), 'precip-loss':('qp', 1.0)}
    ),

    (# Single downsampling stage,  scalar upsamplings by factors of 2 or 3 only
        (
            ( # stage 1
                ('C', 16, (3,3)),
                ('D', (2,3))
            ),
        ),
        (
            ( # stage 1a
                ('U', 16, (3,3), (2,2)),
                ('C', 16, (3,3))    
            ),
            ( # stage 1b
                ('U', 16, (3,3), (2,2)),
                ('C', 16, (3,3))    
            ),
            ( # stage 2a
                ('U', 16, (3,3), (2,2)),
                ('C', 16, (3,3)),
            ),
            ( # stage 2b
                ('U', 16, (3,3), (2,2)),
                ('C', 16, (3,3)),
            ),
            ( # stage 3a
                ('U', 16, (3,3), (2,2)),
                ('C', 16, (3,3)),
            ),
            ( # stage 3b
                ('U', 16, (3,3), (3,3)),
                ('C', 16, (3,3)),
            )            
        ),
        (
            ( # stage 1
                ('U', 16, (3,3), (2,3)),
                ('C', 8, (3,3)),
            ),
        ),
        {'learnrate':0.01, 'regularization':('L1', 1.0), 'temp-loss':('normal',5.0), 'precip-loss':('qp', 1.0)}
    ),

    (# Downsample to 48x48, upsample to match
        (
            ( # stage 1
                ('C', 16, (3,3)),
                ('D', (2,3))
            ),
            ( # stage 2
                ('C', 16, (3,3)),
                ('D', (2,2))
            ),            
        ),
        (
            ( # stage 1a
                ('U', 16, (3,3), (2,2)),
                ('C', 16, (3,3))    
            ),
            ( # stage 1b
                ('U', 16, (3,3), (2,2)),
                ('C', 16, (3,3))    
            ),
            ( # stage 2a
                ('U', 16, (3,3), (2,2)),
                ('C', 16, (3,3))    
            ),
            ( # stage 2b
                ('U', 16, (3,3), (2,2)),
                ('C', 16, (3,3))    
            ), 
            ( # stage 3
                ('U', 16, (3,3), (3,3)),
                ('C', 16, (3,3)),
            )
        ),
        (
            ( # stage 1
                ('U', 16, (3,3), (2,2)),
                ('C', 8, (3,3)),
            ),
            ( # stage 2
                ('U', 16, (3,3), (2,3)),
                ('C', 8, (3,3)),
            ),            
        ),
        {'learnrate':0.01, 'regularization':('L1', 1.0), 'temp-loss':('normal',5.0), 'precip-loss':('qp', 1.0)}
    ),

    (# Downsample to 32x32, upsample to match
        (
            ( # stage 1
                ('C', 16, (3,3)),
                ('D', (2,3))
            ),
            ( # stage 2
                ('C', 16, (3,3)),
                ('D', (3,3))
            ),            
        ),
        (
            ( # stage 1a
                ('U', 16, (3,3), (2,2)),
                ('C', 16, (3,3))    
            ),
            ( # stage 1b
                ('U', 16, (3,3), (2,2)),
                ('C', 16, (3,3))    
            ),
            ( # stage 2a
                ('U', 16, (3,3), (2,2)),
                ('C', 16, (3,3))    
            ),
            ( # stage 2b
                ('U', 16, (3,3), (2,2)),
                ('C', 16, (3,3))    
            ), 
            ( # stage 3
                ('U', 16, (3,3), (2,2)),
                ('C', 16, (3,3)),
            )
        ),
        (
            ( # stage 1
                ('U', 16, (3,3), (3,3)),
                ('C', 8, (3,3)),
            ),
            ( # stage 2
                ('U', 16, (3,3), (2,3)),
                ('C', 8, (3,3)),
            ),            
        ),
        {'learnrate':0.01, 'regularization':('L1', 1.0), 'temp-loss':('normal',5.0), 'precip-loss':('qp', 1.0)}
    ),

    (# Downsample to 16x16, upsample to match
        (
            ( # stage 1
                ('C', 16, (3,3)),
                ('D', (2,3))
            ),
            ( # stage 2
                ('C', 16, (3,3)),
                ('D', (3,3))
            ),
            ( # stage 3
                ('C', 16, (3,3)),
                ('D', (2,2))
            ),            
        ),
        (
            ( # stage 1a
                ('U', 16, (3,3), (2,2)),
                ('C', 16, (3,3))    
            ),
            ( # stage 1b
                ('U', 16, (3,3), (2,2)),
                ('C', 16, (3,3))    
            ),
            ( # stage 2a
                ('U', 16, (3,3), (2,2)),
                ('C', 16, (3,3))    
            ),
            ( # stage 2b
                ('U', 16, (3,3), (2,2)),
                ('C', 16, (3,3))    
            ), 
        ),
        (
            ( # stage 1
                ('U', 16, (3,3), (2,2)),
                ('C', 8, (3,3)),
            ),
            ( # stage 2
                ('U', 16, (3,3), (3,3)),
                ('C', 8, (3,3)),
            ),
            ( # stage 3
                ('U', 16, (3,3), (2,3)),
                ('C', 8, (3,3)),
            ),            
        ),
        {'learnrate':0.01, 'regularization':('L1', 1.0), 'temp-loss':('normal',5.0), 'precip-loss':('qp', 1.0)}
    ),

    (# Downsample to 8x8, upsample to match
        (
            ( # stage 1
                ('C', 16, (3,3)),
                ('D', (2,3))
            ),
            ( # stage 2
                ('C', 16, (3,3)),
                ('D', (3,3))
            ),
            ( # stage 3
                ('C', 16, (3,3)),
                ('D', (2,2))
            ),
            ( # stage 4
                ('C', 16, (3,3)),
                ('D', (2,2))
            ),            
        ),
        (
            ( # stage 1a
                ('U', 16, (3,3), (2,2)),
                ('C', 16, (3,3))    
            ),
            ( # stage 1b
                ('U', 16, (3,3), (2,2)),
                ('C', 16, (3,3))    
            ),
            ( # stage 2a
                ('U', 16, (3,3), (2,2)),
                ('C', 16, (3,3))    
            ),
        ),
        (
            ( # stage 1
                ('U', 16, (3,3), (2,2)),
                ('C', 8, (3,3)),
            ),
            ( # stage 2
                ('U', 16, (3,3), (2,2)),
                ('C', 8, (3,3)),
            ),            
            ( # stage 3
                ('U', 16, (3,3), (3,3)),
                ('C', 8, (3,3)),
            ),
            ( # stage 4
                ('U', 16, (3,3), (2,3)),
                ('C', 8, (3,3)),
            ),            
        ),
        {'learnrate':0.01, 'regularization':('L1', 1.0), 'temp-loss':('normal',5.0), 'precip-loss':('qp', 1.0)}
    ),

    (# Downsample to 4x4, upsample to match
        (
            ( # stage 1
                ('C', 16, (3,3)),
                ('D', (2,3))
            ),
            ( # stage 2
                ('C', 16, (3,3)),
                ('D', (3,3))
            ),
            ( # stage 3
                ('C', 16, (3,3)),
                ('D', (2,2))
            ),
            ( # stage 4
                ('C', 16, (3,3)),
                ('D', (2,2))
            ),
            ( # stage 5
                ('C', 16, (3,3)),
                ('D', (2,2))
            ), 
        ),
        (
            ( # stage 1a
                ('U', 16, (3,3), (2,2)),
                ('C', 16, (3,3))    
            ),
            ( # stage 1b
                ('U', 16, (3,3), (2,2)),
                ('C', 16, (3,3))    
            ),
        ),
        (
            ( # stage 1
                ('U', 16, (3,3), (2,2)),
                ('C', 8, (3,3)),
            ),
            ( # stage 2
                ('U', 16, (3,3), (2,2)),
                ('C', 8, (3,3)),
            ),            
            ( # stage 3
                ('U', 16, (3,3), (2,2)),
                ('C', 8, (3,3)),
            ),            
            ( # stage 4
                ('U', 16, (3,3), (3,3)),
                ('C', 8, (3,3)),
            ),
            ( # stage 5
                ('U', 16, (3,3), (2,3)),
                ('C', 8, (3,3)),
            ),            
        ),
        {'learnrate':0.01, 'regularization':('L1', 1.0), 'temp-loss':('normal',5.0), 'precip-loss':('qp', 1.0)}
    ),

    (# Downsample to 2x2, upsample to match
        (
            ( # stage 1
                ('C', 16, (3,3)),
                ('D', (2,3))
            ),
            ( # stage 2
                ('C', 16, (3,3)),
                ('D', (3,3))
            ),
            ( # stage 3
                ('C', 16, (3,3)),
                ('D', (2,2))
            ),
            ( # stage 4
                ('C', 16, (3,3)),
                ('D', (2,2))
            ),
            ( # stage 5
                ('C', 16, (3,3)),
                ('D', (2,2))
            ),
            ( # stage 6
                ('C', 16, (3,3)),
                ('D', (2,2))
            ), 
        ),
        (
            ( # stage 1a
                ('U', 16, (3,3), (2,2)),
                ('C', 16, (3,3))    
            ),
        ),
        (
            ( # stage 1
                ('U', 16, (3,3), (2,2)),
                ('C', 8, (3,3)),
            ),
            ( # stage 2
                ('U', 16, (3,3), (2,2)),
                ('C', 8, (3,3)),
            ),            
            ( # stage 3
                ('U', 16, (3,3), (2,2)),
                ('C', 8, (3,3)),
            ),            
            ( # stage 4
                ('U', 16, (3,3), (2,2)),
                ('C', 8, (3,3)),
            ),            
            ( # stage 5
                ('U', 16, (3,3), (3,3)),
                ('C', 8, (3,3)),
            ),
            ( # stage 6
                ('U', 16, (3,3), (2,3)),
                ('C', 8, (3,3)),
            ),            
        ),
        {'learnrate':0.01, 'regularization':('L1', 1.0), 'temp-loss':('normal',5.0), 'precip-loss':('qp', 1.0)}
    ),

    ## Because our validation code expects at least one stage in each
    ## branch, we can't easily do the case where we downsample all the
    ## way to 1x1 and trivially join the scalars to that.  (For a
    ## similar reason we don't do a case where we don't do any
    ## downsampling and just upsample the scalar inputs.)

    ## The rest of these were (mostly) the results of running the
    ## hyperparameter search.  Putting them here is the easiest way of
    ## continuing those runs.
    (((('C', 11, (6, 7)), ('D', (2, 3))),),
  ((('U', 16, (3, 3), (4, 4)), ('C', 16, (3, 3)), ('C', 9, (5, 7))),
   (('U', 16, (3, 3), (4, 4)), ('C', 16, (1, 3))),
   (('U', 16, (3, 3), (6, 6)), ('C', 18, (2, 3)))),
  ((('U', 16, (3, 3), (2, 3)), ('C', 16, (4, 7)), ('C', 7, (4, 3))),),
  {'learnrate': 0.00433148164850209,
   'precip-loss': ('qp', 14.16505855125367),
   'regularization': ('L1', 0.4726195042773389),
   'temp-loss': ('normal', 0.689692455218961)}),
 (((('C', 9, (5, 6)), ('C', 11, (7, 7)), ('D', (2, 3))),),
  ((('U', 16, (3, 3), (2, 2)), ('C', 16, (1, 3))),
   (('U', 16, (3, 3), (2, 2)),
    ('C', 16, (3, 3)),
    ('C', 10, (5, 5)),
    ('C', 12, (4, 4)),
    ('C', 10, (4, 6))),
   (('U', 16, (3, 3), (2, 2)), ('C', 14, (3, 3))),
   (('U', 16, (3, 3), (2, 2)), ('C', 16, (3, 3))),
   (('U', 16, (3, 3), (2, 2)), ('C', 16, (3, 3))),
   (('U', 16, (3, 3), (3, 3)), ('C', 16, (3, 3)))),
  ((('U', 16, (3, 3), (2, 3)), ('C', 8, (3, 3))),),
  {'learnrate': 0.005068166471472314,
   'precip-loss': ('qp', 0.1241823617995032),
   'regularization': ('L1', 1.0),
   'temp-loss': ('normal', 5.0)}),
 (((('C', 15, (3, 7)),
    ('C', 13, (7, 6)),
    ('C', 10, (4, 3)),
    ('C', 14, (7, 5)),
    ('C', 12, (4, 5)),
    ('D', (2, 3))),
   (('C', 17, (4, 3)), ('D', (2, 2)))),
  ((('U', 16, (3, 3), (2, 2)), ('C', 12, (4, 3))),
   (('U', 16, (3, 3), (2, 2)),),
   (('U', 16, (3, 3), (2, 2)),),
   (('U', 16, (3, 3), (2, 2)), ('C', 13, (7, 6))),
   (('U', 16, (3, 3), (3, 3)),
    ('C', 12, (4, 6)),
    ('C', 15, (5, 6)),
    ('C', 16, (5, 3)))),
  ((('U', 16, (3, 3), (2, 2)), ('C', 15, (7, 6))),
   (('U', 16, (3, 3), (2, 3)),
    ('C', 8, (5, 5)),
    ('C', 16, (4, 3)),
    ('C', 15, (4, 7)))),
  {'learnrate': 0.00018826813164004395,
   'precip-loss': ('qp', 15.197694406489406),
   'regularization': ('L2', 0.5057714234352115),
   'temp-loss': ('normal', 0.45442637256123447)}),
 (((('C', 16, (4, 7)),
    ('C', 13, (6, 4)),
    ('C', 13, (5, 7)),
    ('C', 11, (8, 3)),
    ('C', 9, (5, 6)),
    ('C', 15, (3, 5)),
    ('C', 12, (4, 4)),
    ('C', 20, (1, 3)),
    ('C', 16, (6, 5)),
    ('C', 14, (5, 7)),
    ('D', (2, 3))),
   (('C', 9, (5, 6)),
    ('C', 14, (3, 7)),
    ('C', 9, (5, 3)),
    ('C', 8, (3, 3)),
    ('D', (3, 3)))),
  ((('U', 16, (3, 3), (2, 2)), ('C', 15, (6, 3)), ('C', 10, (7, 5))),
   (('U', 16, (3, 3), (2, 2)),),
   (('U', 16, (3, 3), (2, 2)), ('C', 16, (3, 3)), ('C', 15, (4, 5))),
   (('U', 16, (3, 3), (2, 2)), ('C', 9, (6, 5))),
   (('U', 16, (3, 3), (2, 2)),)),
  ((('U', 16, (3, 3), (3, 3)),
    ('C', 11, (6, 5)),
    ('C', 15, (2, 4)),
    ('C', 13, (7, 6))),
   (('U', 16, (3, 3), (2, 3)), ('C', 11, (6, 7)))),
  {'learnrate': 0.0003417449649529131,
   'precip-loss': ('qp', 1.7789188610157554),
   'regularization': ('L2', 0.09135517784225075),
   'temp-loss': ('normal', 0.059393190068991165)}),
 (((('C', 16, (3, 3)), ('D', (2, 3))),
   (('C', 16, (3, 3)), ('D', (3, 3))),
   (('C', 16, (3, 3)), ('D', (2, 2)))),
  ((('U', 16, (3, 3), (2, 2)), ('C', 16, (3, 3))),
   (('U', 16, (3, 3), (2, 2)), ('C', 16, (3, 3))),
   (('U', 16, (3, 3), (2, 2)), ('C', 16, (3, 3))),
   (('U', 16, (3, 3), (2, 2)), ('C', 16, (3, 3)))),
  ((('U', 16, (3, 3), (2, 2)), ('C', 8, (3, 3))),
   (('U', 16, (3, 3), (3, 3)), ('C', 8, (3, 3))),
   (('U', 16, (3, 3), (2, 3)), ('C', 8, (3, 3)))),
  {'learnrate': 0.01,
   'precip-loss': ('qp', 1.0),
   'regularization': ('L1', 1.0),
   'temp-loss': ('normal', 5.0)}),
 (((('C', 15, (4, 3)), ('D', (2, 3))),
   (('C', 15, (6, 7)), ('D', (3, 3))),
   (('C', 16, (3, 3)), ('D', (2, 2))),
   (('C', 16, (5, 3)), ('D', (2, 2)))),
  ((('U', 16, (3, 3), (2, 2)), ('C', 16, (5, 3))),
   (('U', 16, (3, 3), (2, 2)), ('C', 15, (2, 3))),
   (('U', 16, (3, 3), (2, 2)), ('C', 14, (3, 3)), ('C', 9, (3, 6)))),
  ((('U', 16, (3, 3), (2, 2)), ('C', 8, (3, 3))),
   (('U', 16, (3, 3), (2, 2)), ('C', 16, (4, 4)), ('C', 8, (3, 3))),
   (('U', 16, (3, 3), (3, 3)), ('C', 8, (3, 3))),
   (('U', 16, (3, 3), (2, 3)), ('C', 5, (3, 3)), ('C', 8, (5, 4)))),
  {'learnrate': 0.0031060241683241686,
   'precip-loss': ('qp', 2.4027648458207023),
   'regularization': ('L1', 1.0),
   'temp-loss': ('normal', 5.0)}),
 (((('C', 11, (9, 3)),
    ('C', 12, (5, 7)),
    ('C', 16, (2, 3)),
    ('C', 8, (3, 6)),
    ('C', 8, (6, 3)),
    ('C', 11, (4, 3)),
    ('C', 13, (6, 4)),
    ('D', (2, 3))),
   (('C', 16, (4, 4)), ('D', (3, 3))),
   (('D', (2, 2)),),
   (('C', 11, (8, 3)), ('D', (2, 2))),
   (('C', 12, (4, 7)), ('D', (2, 2)))),
  ((('U', 16, (3, 3), (2, 2)),
    ('C', 14, (4, 4)),
    ('C', 12, (6, 3)),
    ('C', 11, (9, 4))),
   (('U', 16, (3, 3), (2, 2)), ('C', 11, (6, 4)))),
  ((('U', 16, (3, 3), (2, 2)),),
   (('U', 16, (3, 3), (2, 2)), ('C', 8, (5, 6))),
   (('U', 16, (3, 3), (2, 2)), ('C', 8, (4, 3))),
   (('U', 16, (3, 3), (3, 3)), ('C', 11, (6, 5))),
   (('U', 16, (3, 3), (2, 3)), ('C', 13, (5, 3)))),
  {'learnrate': 0.0010680495598609915,
   'precip-loss': ('qp', 29.96102071289682),
   'regularization': ('L2', 0.008289595302237529),
   'temp-loss': ('normal', 1.8665886798743514)}),
 (((('C', 16, (3, 4)),
    ('C', 16, (3, 3)),
    ('C', 11, (7, 3)),
    ('C', 10, (4, 3)),
    ('D', (2, 3))),
   (('C', 15, (7, 4)), ('C', 13, (3, 3)), ('D', (3, 3))),
   (('C', 16, (4, 3)), ('C', 10, (7, 4)), ('D', (2, 2))),
   (('C', 8, (6, 5)), ('C', 15, (7, 6)), ('D', (2, 2))),
   (('D', (2, 2)),),
   (('C', 16, (5, 4)), ('D', (2, 2)))),
  ((('U', 16, (3, 3), (2, 2)), ('C', 14, (6, 3))),),
  ((('U', 16, (3, 3), (2, 2)), ('C', 14, (5, 5)), ('C', 8, (3, 3))),
   (('U', 16, (3, 3), (2, 2)), ('C', 15, (5, 6))),
   (('U', 16, (3, 3), (2, 2)), ('C', 14, (1, 4)), ('C', 5, (3, 3))),
   (('U', 16, (3, 3), (2, 2)), ('C', 9, (7, 6)), ('C', 8, (3, 3))),
   (('U', 16, (3, 3), (3, 3)), ('C', 8, (4, 5)), ('C', 7, (3, 3))),
   (('U', 16, (3, 3), (2, 3)), ('C', 8, (3, 3)), ('C', 13, (4, 5)))),
  {'learnrate': 0.0014644839532434275,
   'precip-loss': ('qp', 1.8354761019204628),
   'regularization': ('L1', 0.1176947020059101),
   'temp-loss': ('normal', 0.15668929201559062)}),
]


def getconfig(n):
    """Get one of the seed configurations supplied with the package"""
    return _configs[n]

def nconfig():
    """Tell how many seed configurations are supplied."""
    return len(_configs)

